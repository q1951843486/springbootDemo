<?xml version="1.0" encoding="UTF-8"?>
	<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
	scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
	debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
 	<!--定义日志文件的存储地址-->
	<property name="LOG_PATH" value="/demo/log/" />
	 <!--定义日志文件的名称-->
	<property name="LOG_NAME" value="demo-redisLock" />
    <!-- %m输出的信息, %p日志级别, %t线程名, %d日期, %c类的全名, %i索引 -->
    <!-- appender是configuration的子节点,是负责写日志的组件 -->
    <!-- 彩色日志 -->
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>
    <!-- 彩色日志输出格式 -->
    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
    <!-- Console 输出设置 -->
    <!-- ConsoleAppender把日志输出到控制台 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>
	            <!-- 日志输出格式 -->
			    <!-- %date{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{50} (%file:%line\)- %m%n -->
				<!--  显示毫秒数-->
			    <!-- %d{HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n -->
			    <!-- 彩色日志输出格式 -->
			    <!-- ${CONSOLE_LOG_PATTERN} -->
            	<!-- %d %p %t (%file:%line\) - %m%n -->
            	%d %p %t (%c\) (%file:%line\)- %m%n
           	</pattern>
            <!-- 控制台也要使用utf-8，不要使用gbk -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>
    <!-- 控制台日志输出级别   系统日志-->
    <root level="info">
        <appender-ref ref="STDOUT" />
    </root>
    <!-- RollingFileAppender:滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <!-- 1.先按日期存日志，日期变了，将前一天的日志文件名重命名为xxx%日期%索引，新的日志仍然是sys.log -->
    <!-- 2.如果日期没有变化，但是当前日志文件的大小超过1kb时，对当前日志进行分割 重名名 -->
    <appender name="STDOUT_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${LOG_PATH}${LOG_NAME}.log</File>
        <!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 -->  
        <!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 -->  
            <!-- 文件名：log/demo-redisLock.2017-12-05.0.log -->
            <fileNamePattern>${LOG_PATH}${LOG_NAME}.%d.%i.log</fileNamePattern>
            <!-- 每产生一个日志文件，该日志文件的保存期限为30天 -->
            <maxHistory>30</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy  class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">      
                <!-- maxFileSize:这是活动文件的大小，默认值是10MB-->    
                <maxFileSize>10240KB</maxFileSize>      
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>      
            <!-- pattern节点，用来设置日志的输入格式 -->  
            <pattern>      
                <!-- %d %p %t (%c.java\) (%file:%line\) - %m%n -->
                %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n
            </pattern>      
            <!-- 记录日志的编码 -->  
            <charset>UTF-8</charset> <!-- 此处设置字符集 -->     
        </encoder>
    </appender>
    <springProfile name="dev,test,uat">
	    <!-- 指定项目中某个包，当有日志操作行为时的日志记录级别 -->  
	    <!-- com.cn.demo.redisLock为根包，也就是只要是发生在这个根包下面的所有日志操作行为的权限都是DEBUG -->  
	    <!-- 级别依次为【从高到低】：FATAL > ERROR > WARN > INFO > DEBUG > TRACE  -->  
	    <logger name="com.cn.demo.redisLock" level="DEBUG" additivity="false">      
	        <!-- 日志文件输出-->
	        <appender-ref ref="STDOUT_FILE" />  
	        <!-- 控制台日志输出 -->
	        <appender-ref ref="STDOUT" /> 
	    </logger>
    </springProfile>
    <springProfile name="pro">
   		<logger name="com.cn.demo.redisLock" level="INFO" additivity="false">      
	        <appender-ref ref="STDOUT_FILE" />  
    	</logger>
    </springProfile>
</configuration>